{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import { TaggedTemplateExpression } from '@babel/types'\nimport {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n  ColumnMeta,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumn<TData extends RowData, TValue> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type HeaderContext<TData, TValue> = {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TData extends RowData> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TData extends RowData> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue<string>(columnId)?.toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue<string>(columnId)?.includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TData extends RowData> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport type FilterFn<TData extends RowData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport type FiltersColumnDef<TData extends RowData> = {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TData extends RowData> = {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TData extends RowData> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\nexport type FiltersOptions<TData extends RowData> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n} & (keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    })\n\nexport type FiltersInstance<TData extends RowData> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport type GroupingColumnDef<TData extends RowData, TValue> = {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TData extends RowData> = {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions = {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n} & (keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    })\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TData extends RowData> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TData extends RowData> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions = {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TData extends RowData> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TData extends RowData> = {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TData extends RowData> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TData extends RowData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport type SortingColumnDef<TData extends RowData> = {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TData extends RowData> = {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TData extends RowData> = {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n} & (keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    })\n\nexport type SortingInstance<TData extends RowData> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  ColumnDefTemplate,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping, GroupingColumnDef } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TData extends RowData> = {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport type CoreInstance<TData extends RowData> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport type CellContext<TData extends RowData, TValue> = {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport type CoreCell<TData extends RowData, TValue> = {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n) {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TData extends RowData> = {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]!.getValue<number>(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","floor","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getDefaultPinningState","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","renderValue","_cell$getValue","renderFallbackValue","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","j","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aValue","aUndefined","bUndefined","sortInt"],"mappings":"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"}