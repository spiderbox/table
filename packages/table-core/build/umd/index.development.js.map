{"version":3,"file":"index.development.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import { TaggedTemplateExpression } from '@babel/types'\nimport {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n  ColumnMeta,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumn<TData extends RowData, TValue> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type HeaderContext<TData, TValue> = {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TData extends RowData> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TData extends RowData> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue<string>(columnId)?.toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue<string>(columnId)?.includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TData extends RowData> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport type FilterFn<TData extends RowData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport type FiltersColumnDef<TData extends RowData> = {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TData extends RowData> = {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TData extends RowData> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\nexport type FiltersOptions<TData extends RowData> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n} & (keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    })\n\nexport type FiltersInstance<TData extends RowData> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport type GroupingColumnDef<TData extends RowData, TValue> = {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TData extends RowData> = {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions = {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n} & (keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    })\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TData extends RowData> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TData extends RowData> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions = {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TData extends RowData> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TData extends RowData> = {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TData extends RowData> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TData extends RowData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport type SortingColumnDef<TData extends RowData> = {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TData extends RowData> = {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TData extends RowData> = {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n} & (keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    })\n\nexport type SortingInstance<TData extends RowData> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  ColumnDefTemplate,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping, GroupingColumnDef } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TData extends RowData> = {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport type CoreInstance<TData extends RowData> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport type CellContext<TData extends RowData, TValue> = {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport type CoreCell<TData extends RowData, TValue> = {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n) {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TData extends RowData> = {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]!.getValue<number>(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","Error","column","columns","getFlatColumns","flatMap","process","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","center","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","getLeftTotalSize","getCenterTotalSize","getRightTotalSize","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","warn","getRenderValue","renderFallbackValue","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","pass","resolvedColumnFilters","resolvedGlobalFilters","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}