{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import { TaggedTemplateExpression } from '@babel/types'\nimport {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n  ColumnMeta,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumn<TData extends RowData, TValue> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type HeaderContext<TData, TValue> = {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TData extends RowData> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TData extends RowData> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue<string>(columnId)?.toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue<string>(columnId)?.includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TData extends RowData> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport type FilterFn<TData extends RowData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport type FiltersColumnDef<TData extends RowData> = {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TData extends RowData> = {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TData extends RowData> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\nexport type FiltersOptions<TData extends RowData> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n} & (keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    })\n\nexport type FiltersInstance<TData extends RowData> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport type GroupingColumnDef<TData extends RowData, TValue> = {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TData extends RowData> = {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions = {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n} & (keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    })\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TData extends RowData> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TData extends RowData> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions = {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TData extends RowData> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TData extends RowData> = {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TData extends RowData> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TData extends RowData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport type SortingColumnDef<TData extends RowData> = {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TData extends RowData> = {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TData extends RowData> = {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n} & (keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    })\n\nexport type SortingInstance<TData extends RowData> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  ColumnDefTemplate,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping, GroupingColumnDef } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TData extends RowData> = {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport type CoreInstance<TData extends RowData> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport type CellContext<TData extends RowData, TValue> = {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport type CoreCell<TData extends RowData, TValue> = {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n) {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TData extends RowData> = {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]!.getValue<number>(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","process","env","NODE_ENV","Error","column","columns","getFlatColumns","flatMap","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","center","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","getLeftTotalSize","getCenterTotalSize","getRightTotalSize","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","warn","getRenderValue","renderFallbackValue","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","pass","resolvedColumnFilters","resolvedGlobalFilters","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}